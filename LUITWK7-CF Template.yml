AWSTemplateFormatVersion: 2010-09-09
Description: This is a test template for Week 7
Resources:
  # Creating Your VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Join 
            - ''
            - - !Ref 'AWS::StackName'
              - '-VPC'
    
  # Creating an InternetGateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC

  # Attach the Internet Gateway to Your VPC
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    
  # Create Your First Public Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: Select [0, !GetAZs '']
      CidrBlock: 10.10.1.0/24
      MapPublicIpOnLaunch: true
      
  # Create Your Second Public Subnet
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: Select [0, !GetAZs '']
      CidrBlock: 10.10.2.0/24
      MapPublicIpOnLaunch: true 

  # Create Your Third Public Subnet
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: Select [0, !GetAZs '']
      CidrBlock: 10.10.3.0/24
      MapPublicIpOnLaunch: true

  # Create Your Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Create Your PublicRoute
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Your First Public Subnet
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Associate Your Second Public Subnet
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Associate Your Third Public Subnet
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  
  # Create Your AutoScaling Group
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '2'
      DesiredCapacity: '2'
      VPCZoneIdentifier: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      MetricsCollection:
        - Granularity: 1Minute
  
  # Create a Scaling Policy
  ScalingPolicyWk7:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: '1'
   
  # CPUALARMHIGH
  CloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '50'
      AlarmDescription: Trigger An Alarm if the CPU usage goes higher than 50%
      Period: '60'
      AlarmActions:
        - !Ref ScalingPolicyWk7
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
      
  # Create Your Application Load Balanacer
  ApplicationLoadBalancer : 
    Type : 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties : 
      Subnets : !Ref Subnets
      
  # Create an ALB Target Group
  ALBTargetGroup : 
    Type : 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties : 
      HealthCheckIntervalSeconds : '30'
      HealthCheckTimeoutSeconds : '5'
      HealthyThresholdCount" : '3'
      Port : '80'
      Protocol : HTTP
      UnhealthyThresholdCount : '5'
      VpcId : !Ref VpcId
      
 # Create Your Instance Security Group
  InstanceSecurityGroup:
    Type : AWS::EC2::SecurityGroup
    Properties : 
      GroupDescription : Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress : 
        - IpProtocol : tcp
          FromPort : 22
          ToPort : 22
          CidrIp : 0.0.0.0/0
        - IpProtocol : tcp
          FromPort : 80
          ToPort : 80
          SourceSecurityGroupId : {Fn::Select : [0, {Fn::GetAtt : [ApplicationLoadBalancer, SecurityGroups]}]}
          
  # Get Your VPC ID
  VpcId : !Ref VPC
  
  # Create Your Launch Template
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: Sub '${AWS::StackName}-ASGtemplate'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Groups:
              - !Ref InstanceSecurityGroup
        ImageId: ami-09d3b3274b6c5d4aa
        InstanceType: t2.micro
        UserData:
          Fn::Base64: Sub |
            #!/bin/bash
            #This is a customized script for the Apache Server & Stress Tool
            sudo yum update -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            amazon-linux-extras install epel-y
            sudo yum install stress -y
        #SecurityGroupIds: 
        #  - !Ref InstanceSecurityGroup



  
